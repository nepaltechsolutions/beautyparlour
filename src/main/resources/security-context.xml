<?xml version="1.0" encoding="UTF-8"?>
<beans:beans
	xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           http://www.springframework.org/schema/security
           http://www.springframework.org/schema/security/spring-security-4.2.xsd">
	<global-method-security
		jsr250-annotations="enabled" />
	<http pattern="/**/*.css" security="none" />
	<http pattern="/**/*.css.map" security="none" />
	<http pattern="/**/*.gif" security="none" />
	<http pattern="/**/*.html" security="none" />
	<http pattern="/**/*.pdf" security="none" />
	<http pattern="/**/*.ttf" security="none" />
	<http pattern="/**/*.eot" security="none" />
	<http pattern="/**/*.svg" security="none" />
	<http pattern="/**/*.woff" security="none" />
	<http pattern="/**/*.woff2" security="none" />
	<http pattern="/**/*.xls" security="none" />
	<http pattern="/**/*.ico" security="none" />
	<http pattern="/**/*.jpg" security="none" />
	<http pattern="/**/*.js" security="none" />
	<http pattern="/**/*.png" security="none" />
	<http pattern="/**/*.xml" security="none" />
	<http pattern="/**/*.mp4" security="none" />
	<http pattern="angular/*" security="none" />
	<!--<http pattern="/embed/*" security="none"/> -->
	<http pattern="beautyShalon/*" security="none" />
	<http auto-config="true">
		<!-- <intercept-url pattern="/Admin/**" -->
		<!-- access="ROLE_ADMINISTRATOR,isAuthenticated()" requires-channel="any" 
			/> -->
			
		<intercept-url pattern="/Admin/**"
			access="hasRole(ROLE_ADMINISTRATOR,isAuthenticated())"
			requires-channel="any" />
		
		<intercept-url pattern="/" access="isAnonymous()"
			requires-channel="any" />
		<intercept-url pattern="angular/*" access="isAnonymous()"
			requires-channel="any" />
		<!-- <intercept-url pattern="/login/**" -->
		<!-- access="isAnonymous()" requires-channel="any" /> -->
		<remember-me key="examplerm" />
		<custom-filter position="CONCURRENT_SESSION_FILTER"
			ref="customSessionFilter" />
		<!-- login-processing-url="../j_spring_security_check" -->
		<form-login login-page="/logme"
			login-processing-url="/login" username-parameter="username"
			password-parameter="password"
			authentication-failure-url="/main?errormessage=authentication.login.failed"
			always-use-default-target="false" default-target-url="/"
			authentication-success-handler-ref="ash" />
		<csrf disabled="true" />
		<logout logout-url="/logout" logout-success-url="/" />
		<access-denied-handler ref="" error-page="/" />

		<session-management
			session-authentication-strategy-ref="sls" />
		<port-mappings>
			<port-mapping http="8080" https="8443" />
		</port-mappings>
	</http>

	<authentication-manager
		alias="authenticationManager">
		<authentication-provider
			user-service-ref="userDetailService">
			<password-encoder ref="passwordEncoder">
			</password-encoder>
		</authentication-provider>
	</authentication-manager>

	<!-- <authentication-manager alias="authenticationManager"> <authentication-provider 
		ref="userTest"> </authentication-provider> </authentication-manager> -->


	<beans:bean id="ash"
		class="com.spring.session.CustomSavedRequestAwareAuthenticationSuccessHandler">
	</beans:bean>

	<beans:bean id="forbiddenEntryPoint"
		class="org.springframework.security.web.authentication.Http403ForbiddenEntryPoint" />

	<beans:bean id="customSessionFilter"
		class="com.spring.session.CustomSessionFilter">
		<beans:constructor-arg ref="sessionRegistry" />

	</beans:bean>

	<beans:bean id="sls"
		class="com.spring.session.SessionLoggingStrategy">
		<beans:constructor-arg ref="sas" />
		<beans:constructor-arg ref="sessionLogApi" />
	</beans:bean>

	<beans:bean id="sas"
		class="com.spring.session.PersistingConcurrentSessionControlStrategy">
		<beans:constructor-arg name="sessionRegistry"
			ref="sessionRegistry" />
		<beans:constructor-arg name="sessionApi"
			ref="sessionApi" />
		<beans:property name="maximumSessions" value="-1" />
	</beans:bean>

	<beans:bean id="sessionRegistry"
		class="com.spring.session.PersistingSessionRegistry">
		<beans:constructor-arg ref="sessionApi" />
	</beans:bean>

	<beans:bean id="userDetailService"
		class="com.spring.session.UserDetailsServiceImpl">
		<beans:constructor-arg ref="userRepository" />
	</beans:bean>
	
	<beans:bean id="adminCreator"
		class="com.spring.startup.FirstAdminCreator" init-method="create" >
		<beans:constructor-arg ref="userRepository" />
		<beans:constructor-arg ref="passwordEncoder" />
	</beans:bean>






	<!-- <beans:bean id="connectionFactoryLocator" class="org.springframework.social.connect.ConnectionFactoryLocator" 
		/> -->

	<!-- <beans:bean id="validator" -->
	<!-- class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean" 
		/> -->
	<beans:bean id="passwordEncoder"
		class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />

	<!-- <beans:bean id="oAuth2ClientContext" class="org.springframework.security.oauth2.client.OAuth2ClientContext" 
		/> <beans:bean id="oAuth2ClientContextFilter" class="org.springframework.security.oauth2.client.filter.OAuth2ClientContextFilter" 
		/> <beans:bean id="oAuth2ClientSecurityConfig" class="com.example.oAuth2.google.OAuth2ClientSecurityConfig"> 
		<beans:constructor-arg ref="oAuth2ClientContext" /> <beans:constructor-arg 
		ref="oAuth2ClientContextFilter" /> </beans:bean> -->

	<!-- <beans:bean id="userTest" class="com.example.session.UserTest"> -->
	<!-- <beans:constructor-arg ref="peopleRepository" /> -->
	<!-- </beans:bean> -->

<!-- 	<beans:bean id="startupCreator" class="com.example.startup.FirstAdminCreator" -->
<!-- 	init-method="create"> -->
<!-- 	<beans:constructor-arg ref="passwordEncoder" /> -->
<!-- 	<beans:constructor-arg ref="peopleRepository" /> -->

<!-- 	</beans:bean> -->





</beans:beans>